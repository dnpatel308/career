stages:
  - build
  - packaging
  - test
  - publish
  - deploy
  - apitests
  - populate

image: maven:3.5.3-jdk-8


variables:
  MAVEN_CLI_OPTS: "--batch-mode -s .m2/settings.xml"
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"
  IMAGE_NAME: gitlab-registry.brodos.net/wms/device-context:${CI_COMMIT_REF_NAME}-${CI_PIPELINE_ID}

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .m2/repository/

sonarqube_master_job:
  stage: test
  script:
    - mvn ${MAVEN_CLI_OPTS} sonar:sonar -Dsonar.host.url=$SONAR_URL -Dsonar.login=$SONAR_LOGIN -Dsonar.gitlab.project_id=$CI_PROJECT_PATH -Dsonar.gitlab.commit_sha=$CI_COMMIT_SHA -Dsonar.gitlab.ref_name=$CI_COMMIT_REF_NAME -f ./pom.xml    

build:
  stage: build  
  script:    
    - mvn $MAVEN_CLI_OPTS clean install -D skipTests -f ./pom.xml  
    - mvn $MAVEN_CLI_OPTS  clean install -f device-context-testing/pom.xml
  artifacts:
    paths:
     - ./target/*.jar     
     - ./target/classes/application.properties          
     - ./log4j2.properties
     - ./device-reservation-testing     

docker-build:
  stage: packaging
  image: docker:18
  services:
    - docker:18-dind
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN gitlab-registry.brodos.net
    - docker build -t ${IMAGE_NAME} -f build/docker/Dockerfile .
    - docker push ${IMAGE_NAME}  
    
container_scan:
  stage: test
  image:
    name: anchore/anchore-engine:v0.3.0
    entrypoint: [""]
  services:
    - name: anchore/engine-db-preload:v0.3.0
      alias: anchore-db

  variables:
    GIT_STRATEGY: none
    ANCHORE_FAIL_ON_POLICY: "false"
    ANCHORE_TIMEOUT: 500

  script:
    - |
       curl -o /tmp/anchore_ci_tools.py https://raw.githubusercontent.com/anchore/ci-tools/v0.3.0/scripts/anchore_ci_tools.py
       chmod +x /tmp/anchore_ci_tools.py
        ln -s /tmp/anchore_ci_tools.py /usr/local/bin/anchore_ci_tools
    - anchore_ci_tools --setup
    - anchore-cli --u admin --p foobar registry add $CI_REGISTRY gitlab-ci-token $CI_JOB_TOKEN --skip-validate
    - anchore_ci_tools --analyze --report --image ${IMAGE_NAME} --timeout ${ANCHORE_TIMEOUT}
    - |
        if [ "$ANCHORE_FAIL_ON_POLICY" == "true" ]; then
          anchore-cli evaluate check ${IMAGE_NAME}
        else
          set +o pipefail
          anchore-cli evaluate check ${IMAGE_NAME} | tee /dev/null
        fi

  artifacts:
    name: ${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}
    paths:
    - anchore-reports/*

anchore_reports:
  stage: publish
  image: alpine:latest
  dependencies:
    - container_scan

  variables:
    GIT_STRATEGY: none

  script:
    - apk add jq
    - |
        echo "Parsing anchore reports."
        printf "\n%s\n" "The following OS packages are installed on ${IMAGE_NAME}:"
        jq '[.content | sort_by(.package) | .[] | {package: .package, version: .version}]' anchore-reports/image-content-os-report.json || true
        printf "\n%s\n" "The following vulnerabilites were found on ${IMAGE_NAME}:"
        jq '[.vulnerabilities | group_by(.package) | .[] | {package: .[0].package, vuln: [.[].vuln]}]' anchore-reports/image-vuln-report.json || true

deploy_de-bai1-staging:
  image: gitlab-registry.brodos.net/mesosphere/dcos-cli:latest  
  stage: deploy
  only:
    - /^Branch_.[0-9]*.[0-9]$/
  script:
    - dcos cluster attach de-bai1
    - |
        dcos marathon app update device-context/staging << EOF
        {
               "env": {
                 "SPRING_DATASOURCE_URL": "${SPRING_DATASOURCE_URL}",
                 "SPRING_DATASOURCE_USERNAME": "${SPRING_DATASOURCE_USERNAME}",
                 "SPRING_DATASOURCE_PASSWORD": "${SPRING_DATASOURCE_PASSWORD}"
               },
               "id": "/device-context/staging",
               "backoffFactor": 1.15,
               "backoffSeconds": 1,
               "container": {
                 "portMappings": [
                   {
                     "containerPort": 8080,
                     "hostPort": 0,
                     "labels": {
                       "VIP_0": "/device-context/staging:8080"
                     },
                     "protocol": "tcp",
                     "name": "http"
                   }
                 ],
                 "type": "DOCKER",
                 "volumes": [],
                 "docker": {
                   "image": "${IMAGE_NAME}",
                   "forcePullImage": false,
                   "privileged": false,
                   "parameters": [
                   {
                     "key": "log-opt",
                     "value": "gelf-address=udp://de-bai1-gelf.brodosdmz.net:12201"
                   },
                   {
                     "key": "log-opt",
                     "value": "tag=device-context-staging"
                   },
                   {
                     "key": "log-driver",
                     "value": "gelf"
                   }
                  ]
                 }
               },
               "cpus": 1,
               "disk": 0,
               "fetch": [
                 {
                   "uri": "file:///etc/docker.tar.gz",
                   "extract": true,
                   "executable": false,
                   "cache": false
                 }
               ],
               "healthChecks": [
                 {
                   "gracePeriodSeconds": 300,
                   "intervalSeconds": 60,
                   "maxConsecutiveFailures": 3,
                   "timeoutSeconds": 20,
                   "delaySeconds": 15,
                   "protocol": "COMMAND",
                   "command": {
                     "value": "curl -f http://localhost:8080/erp-context/health"
                   }
                 }
               ],
               "instances": 1,
               "maxLaunchDelaySeconds": 300,
               "mem": 768,
               "gpus": 0,
               "networks": [
                 {
                   "mode": "container/bridge"
                 }
               ],
               "requirePorts": false,
               "upgradeStrategy": {
                 "maximumOverCapacity": 1,
                 "minimumHealthCapacity": 1
               },
               "killSelection": "YOUNGEST_FIRST",
               "unreachableStrategy": {
                 "inactiveAfterSeconds": 0,
                 "expungeAfterSeconds": 0
               },
               "constraints": [],
               "labels": {
                 "BRODOS-COSTUNIT": "144130",
                 "BRODOS-TEAM": "Stock Team",
                 "BRODOS-VCS": "https://gitlab.brodos.net/wms/device-context",
                 "BRODOS-PROJECTNO": "PROJEKTNO-4"
               }
        }
        EOF    
    - sleep 180   
  environment:
    name: de-bai1-staging
    url: https://devicecontext-staging.brodos.net  
  when: manual
  allow_failure: false

deploy_de-bai1-production:
  image: gitlab-registry.brodos.net/mesosphere/dcos-cli:latest
  stage: deploy
  only:    
    - /^[0-9]*.[0-9]*.[0-9]+$/
  script:
    - dcos cluster attach de-otc-eu-lt-1
    - |
        dcos marathon app update stock-projects/device-context << EOF
        {
               "env": {
                 "SPRING_DATASOURCE_URL": "${SPRING_DATASOURCE_URL}",
                 "SPRING_DATASOURCE_USERNAME": "${SPRING_DATASOURCE_USERNAME}",
                 "SPRING_DATASOURCE_PASSWORD": "${SPRING_DATASOURCE_PASSWORD}"
               },
               "id": "/stock-projects/device-context",
               "backoffFactor": 1.15,
               "backoffSeconds": 1,
               "container": {
                 "portMappings": [
                   {
                     "containerPort": 8080,
                     "hostPort": 0,
                     "labels": {
                       "VIP_0": "/stock-projects/device-context:8080"
                     },
                     "protocol": "tcp",
                     "name": "http"
                   }
                 ],
                 "type": "DOCKER",
                 "volumes": [],
                 "docker": {
                   "image": "${IMAGE_NAME}",
                   "forcePullImage": false,
                   "privileged": false,
                   "parameters": [
                   {
                     "key": "log-opt",
                     "value": "gelf-address=udp://de-bai1-gelf:12201"
                   },
                   {
                     "key": "log-opt",
                     "value": "tag=device-context-production"
                   },
                   {
                     "key": "log-driver",
                     "value": "gelf"
                   }
                  ]
                 }
               },
               "cpus": 1,
               "disk": 0,
               "fetch": [
                 {
                   "uri": "file:///etc/docker.tar.gz",
                   "extract": true,
                   "executable": false,
                   "cache": false
                 }
               ],
               "healthChecks": [
                 {
                   "gracePeriodSeconds": 300,
                   "intervalSeconds": 60,
                   "maxConsecutiveFailures": 3,
                   "timeoutSeconds": 20,
                   "delaySeconds": 15,
                   "protocol": "COMMAND",
                   "command": {
                     "value": "curl -f http://localhost:8080/erp-context/health"
                   }
                 }
               ],
               "instances": 1,
               "maxLaunchDelaySeconds": 300,
               "mem": 768,
               "gpus": 0,
               "networks": [
                 {
                   "mode": "container/bridge"
                 }
               ],
               "requirePorts": false,
               "upgradeStrategy": {
                 "maximumOverCapacity": 1,
                 "minimumHealthCapacity": 1
               },
               "killSelection": "YOUNGEST_FIRST",
               "unreachableStrategy": {
                 "inactiveAfterSeconds": 0,
                 "expungeAfterSeconds": 0
               },
               "constraints": [],
               "labels": {
                 "BRODOS-COSTUNIT": "144130",
                 "BRODOS-TEAM": "Stock Team",
                 "BRODOS-VCS": "https://gitlab.brodos.net/wms/device-context",
                 "BRODOS-PROJECTNO": "PROJEKTNO-4"
               }
        }
        EOF    
  environment:
    name: de-bai1-production
    url: https://devicereservations.brodos.net
  when: manual  


restassure-test:
  stage: apitests  
  only:
    - /^Branch_.[0-9]*.[0-9]$/
  script:    
    - cp -r target/device-context-*.jar  device-context-testing/.
    - cd device-context-testing    
    - export BASE_URL=${BASE_URL_STAGING}
    - export API_KEY_HEADER=${API_KEY_HEADER_STAGING}
    - java -jar device-context-*.jar
#  artifacts:
#   paths:
#    - ./device-context-testing
  when: on_success

pages:
  stage: populate  
  only:
    - /^Branch_.[0-9]*.[0-9]$/
  script:            
    - ls -ltr ./device-context-testing/test-report/*
    - mkdir -p ./public
    - cp -r ./device-context-testing/test-output/* ./public/
    - cp -r ./device-context-testing/test-report/* ./public/.
  artifacts:
   paths:
    - public
  when: on_success


    
